///dart语言的面向对象编程技巧
///1、封装、继承、多态
///善于封装，大到功能模块的封装、类的封装与抽象，小到方法的封装，封装的目的在于复用和易于扩展、维护
///不要在一个方法体里面对其太多的代码 （尽量小于100行）
///2、点点点的技巧
///在一个类的世界里，万物皆对象：1点看对象有哪些方法和属性；2点看源码；3点探究竟
///
/// Dart编程小技巧：
/// 1、安全的调用
/// 2、使用双表达式设置默认值
/// 3、使用 [].contains(xxx)判空技巧
void main() {
  List list;

  ///1、安全调用
  ///对于不确定是否为空的对象，可以通过 ?. 的方式来访问他的属性和方法，以防止空异常，如：a?.foo()
//  print(list.length);//运行时会抛出空指针异常
  print(list?.length); //安全的调用方式

  ///2、设置默认值，防止为空的情况下无值输出
  print(list?.length ?? 100);

  ///3、判空技巧
  List l = [];
  l.add(0);
  l.add('');
  l.add(null);
  //常规方式
  if(l[0] == null || l[0] == '' || l[0] == 0){
    print("l[0] is empty");
  }
  //技巧
  if([0,'',null].contains(l[0])){
    print("l[0] is empty");
  }
}
